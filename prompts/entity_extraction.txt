-Goal-
Given a text document that is potentially relevant to software requirements and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.

-Steps-
1. Identify all entities. For each identified entity, extract the following information:
- entity_name: Name of the entity, capitalized
- entity_type: One of the following types: [{entity_types}]
- entity_description: Comprehensive description of the entity's attributes and relevance to software requirements
Format each entity as ("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)

2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other in the context of software requirements.
For each pair of related entities, extract the following information:
- source_entity: name of the source entity, as identified in step 1
- target_entity: name of the target entity, as identified in step 1
- relationship_description: explanation as to how the source entity and the target entity are related in the context of software requirements
- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity in terms of their relevance to software requirements
Format each relationship as ("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>{tuple_delimiter}<relationship_strength>)

3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **{record_delimiter}** as the list delimiter.

4. When finished, output {completion_delimiter}

######################
-Examples-
######################
Example 1:
Entity_types: ARTICLE,STANDARD,REQUIREMENT
Text:
The IEEE 830-1998 standard, outlined in the article "Best Practices for Software Requirements Specification", recommends that all software requirements should be verifiable. This means that there should be a finite cost-effective process to check if the final software meets each requirement. The article emphasizes that vague requirements like "user-friendly" or "robust" should be avoided unless they are quantitatively defined.
######################
Output:
("entity"{tuple_delimiter}IEEE 830-1998{tuple_delimiter}STANDARD{tuple_delimiter}A standard for software requirements specification that emphasizes verifiability of requirements)
{record_delimiter}
("entity"{tuple_delimiter}BEST PRACTICES FOR SOFTWARE REQUIREMENTS SPECIFICATION{tuple_delimiter}ARTICLE{tuple_delimiter}An article discussing best practices in software requirements specification, including the importance of verifiable requirements)
{record_delimiter}
("entity"{tuple_delimiter}VERIFIABLE REQUIREMENTS{tuple_delimiter}REQUIREMENT{tuple_delimiter}A best practice stating that all software requirements should be verifiable through a finite cost-effective process)
{record_delimiter}
("entity"{tuple_delimiter}AVOID VAGUE REQUIREMENTS{tuple_delimiter}REQUIREMENT{tuple_delimiter}A best practice recommending the avoidance of vague terms like "user-friendly" or "robust" unless quantitatively defined)
{record_delimiter}
("relationship"{tuple_delimiter}IEEE 830-1998{tuple_delimiter}VERIFIABLE REQUIREMENTS{tuple_delimiter}The IEEE 830-1998 standard recommends that all software requirements should be verifiable{tuple_delimiter}9)
{record_delimiter}
("relationship"{tuple_delimiter}BEST PRACTICES FOR SOFTWARE REQUIREMENTS SPECIFICATION{tuple_delimiter}VERIFIABLE REQUIREMENTS{tuple_delimiter}The article discusses the importance of verifiable requirements as per IEEE 830-1998{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}BEST PRACTICES FOR SOFTWARE REQUIREMENTS SPECIFICATION{tuple_delimiter}AVOID VAGUE REQUIREMENTS{tuple_delimiter}The article emphasizes avoiding vague requirements unless quantitatively defined{tuple_delimiter}7)
{completion_delimiter}

######################
Example 2:
Entity_types: ARTICLE,STANDARD,REQUIREMENT
Text:
According to the article "Agile Requirements Engineering", the IEEE 29148-2018 standard for requirements engineering is compatible with agile methodologies. The standard emphasizes the importance of stakeholder involvement throughout the development process. A key requirement in agile development is maintaining a prioritized backlog of user stories, which aligns with the standard's recommendation for continuous requirements management.
######################
Output:
("entity"{tuple_delimiter}AGILE REQUIREMENTS ENGINEERING{tuple_delimiter}ARTICLE{tuple_delimiter}An article discussing the compatibility of agile methodologies with requirements engineering standards)
{record_delimiter}
("entity"{tuple_delimiter}IEEE 29148-2018{tuple_delimiter}STANDARD{tuple_delimiter}A standard for requirements engineering that is compatible with agile methodologies)
{record_delimiter}
("entity"{tuple_delimiter}STAKEHOLDER INVOLVEMENT{tuple_delimiter}REQUIREMENT{tuple_delimiter}A best practice emphasizing the importance of involving stakeholders throughout the development process)
{record_delimiter}
("entity"{tuple_delimiter}PRIORITIZED BACKLOG{tuple_delimiter}REQUIREMENT{tuple_delimiter}A key requirement in agile development involving maintaining a prioritized list of user stories)
{record_delimiter}
("entity"{tuple_delimiter}CONTINUOUS REQUIREMENTS MANAGEMENT{tuple_delimiter}REQUIREMENT{tuple_delimiter}A recommendation from IEEE 29148-2018 for ongoing management of requirements throughout the development process)
{record_delimiter}
("relationship"{tuple_delimiter}AGILE REQUIREMENTS ENGINEERING{tuple_delimiter}IEEE 29148-2018{tuple_delimiter}The article discusses the compatibility of IEEE 29148-2018 with agile methodologies{tuple_delimiter}9)
{record_delimiter}
("relationship"{tuple_delimiter}IEEE 29148-2018{tuple_delimiter}STAKEHOLDER INVOLVEMENT{tuple_delimiter}The standard emphasizes the importance of stakeholder involvement{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}PRIORITIZED BACKLOG{tuple_delimiter}CONTINUOUS REQUIREMENTS MANAGEMENT{tuple_delimiter}Maintaining a prioritized backlog aligns with the standard's recommendation for continuous requirements management{tuple_delimiter}7)
{completion_delimiter}

######################
-Real Data-
######################
Entity_types: {entity_types}
Text: {input_text}
######################
Output: