Index,Text,Issues
0,"Performance and Availability
The system has several objectives related to performance, including speed, fault tolerance, throughput,
and processing time. The performance criteria for the brokerage system are as follows:
Response Time (for online trading): The maximum response time from when a customer starts a purchase or sale until the final result is returned should be within 500 milliseconds, assuming simultaneous usage by 4 million users in a 3-hour window (9 AM to 12 PM). This time can vary depending on the stock exchange's rate changes and availability.

Minimum Response Time (for online trading): The minimum acceptable response time from a customer's perspective should be within 100 milliseconds, assuming simultaneous usage by 4 million users in a 3-hour window (9 AM to 12 PM).

Availability: The system must be available from 9 AM to 12 PM daily for trading and requests, ensuring a 99% uptime. Transactions must be processed within 500 milliseconds.

Minimum Number of Requests: The system must handle a minimum of 4 million requests during the 3-hour availability window, assuming each user makes at least one request.

Simultaneous Users: The system must support a minimum of 4 million simultaneous users during the 3-hour window.

Scalability: The system should be designed to scale beyond 4 million users, handling up to 6 million simultaneous users and 6 million requests within the 3-hour window, with no degradation in performance. The system must also handle sudden surges in traffic (up to 50% more than the expected number of users) without failure.

Graceful Degradation: In the case of system overload or partial failure, the system must maintain core functionality (e.g., basic order submission) and provide feedback to users about degraded service (e.g., longer response times), without crashing or becoming unavailable. Non-essential features should degrade first, allowing critical trading operations to continue.

Recovery Time Objective (RTO): In the event of a system failure, the system must be restored to full operational status within 15 minutes to minimize disruption during the trading window.

Recovery Point Objective (RPO): In the event of a system failure, no more than 5 minutes of data should be lost, ensuring minimal disruption to user transactions and data integrity.

Users accessing the system via the internet or through brokers can fill out forms and submit them to brokers outside of the 9 AM to 12 PM window.

It's important to define a common criterion for system performance, accepted by all related entities. For example, a test transaction with minimal data on a web page is different from a transaction on a page with many fields and images. Therefore, both systems must be comparable based on the agreed criteria.",None
1,"Security
Information security in the brokerage system refers to preventing unauthorized access, ensuring data integrity, and protecting against data breaches or destruction. The following are the security requirements for the system, which must be supported by appropriate mechanisms:

Data Validation:
All user input, including form data, transaction requests, and queries, must be properly validated to ensure no malicious data (e.g., SQL injection, cross-site scripting) can be entered into the system. Input sanitization should be applied on both client-side and server-side to avoid unauthorized manipulation of data.

Authentication:
The system must use strong, multi-factor authentication (MFA) mechanisms to verify user identities. This includes using secure passwords, biometrics, or one-time passwords (OTPs) for users, ensuring only legitimate users can access their accounts. All authentication data must be encrypted both in transit and at rest to prevent interception or misuse.

Authorization:
The system must implement role-based access control (RBAC) to ensure that users can only access the data and system features they are permitted to use based on their role (e.g., customer, broker, admin). Any attempt to access unauthorized resources should be logged and flagged for review.

Exception Management:
All exceptions or errors must be handled securely, ensuring no sensitive system information (such as stack traces or error codes) is exposed to end users. Instead, generic error messages should be shown. Additionally, exceptions must be logged for auditing purposes, ensuring proper diagnosis and remediation of security-related issues.

Session Management:
Sessions should be managed securely with unique session tokens for each authenticated user. Sessions must time out after a period of inactivity (e.g., 15 minutes) and be automatically terminated if suspicious activity is detected. Session tokens should be stored securely and not exposed in URLs or local storage. For sensitive operations, session re-authentication should be required.

Encryption:
All sensitive data, including user credentials, personal information, transaction details, and communication between the user and the system, must be encrypted using strong encryption algorithms (e.g., AES-256 for data at rest and TLS 1.2/1.3 for data in transit). This ensures that even if data is intercepted, it cannot be read or tampered with.

Audit Logs:
The system must maintain secure audit logs of all significant actions (e.g., login attempts, transactions, data modifications). Logs should be immutable and stored in a secure location to protect against tampering. Audit logs must include user ID, action performed, timestamp, and IP address, ensuring accountability and traceability.

Intrusion Detection and prevention:
The system must have intrusion detection and prevention systems (IDPS) in place to monitor and block potential attacks, such as distributed denial-of-service (DDoS), brute-force attacks, or other unauthorized access attempts. Alerts should be generated for any suspicious activity, and the system should respond to threats automatically where possible (e.g., locking user accounts after multiple failed login attempts).

Security Patching and Updates:
The system must have a process in place to ensure that all software components, including third-party libraries, are regularly updated and patched for known vulnerabilities. Security patches should be applied promptly to prevent exploitation of any vulnerabilities.

",None
2,"Data validation
Data validation involves reviewing, filtering, and removing malicious input to ensure data security and maintain system integrity. Proper input validation protects the system from a wide range of common attacks and vulnerabilities by ensuring that user input is properly sanitized and conforms to expected formats. The following are common attacks mitigated by input validation:

SQL Injection:
This attack exploits vulnerabilities in the application's data validation process, allowing attackers to execute unauthorized SQL commands. It occurs when user input is embedded in SQL queries without proper validation or sanitization, enabling attackers to impersonate users, alter or delete data, or perform denial-of-service attacks. Input validation should ensure that all SQL queries are parameterized, and user inputs are sanitized to prevent SQL injection attacks.

Buffer Overflow:
A buffer overflow occurs when input data exceeds the allocated buffer size in memory, leading to unpredictable behavior such as denial of service, crashes, or code execution. Proper input validation must include size checks for user inputs, ensuring that all inputs are within expected bounds to prevent buffer overflows and other memory-based attacks.

Code Injection:
Code injection attacks involve injecting malicious code into an application to exploit vulnerabilities in its input validation process. These attacks can lead to data theft, unauthorized access, or system compromise. To mitigate code injection, input should be strictly validated against predefined patterns (e.g., escaping special characters) and ensure only allowed data types are processed.

Cross-Site Scripting (XSS):
Cross-site scripting allows attackers to inject malicious scripts into web pages viewed by other users. This can lead to session hijacking, defacement, or theft of sensitive information. Input validation must ensure that any user-supplied data that is rendered on a webpage is properly sanitized and encoded to prevent XSS attacks.

Cross-Site Request Forgery (CSRF):
In CSRF attacks, an attacker tricks a user into executing unwanted actions on a web application in which they are authenticated. Input validation must ensure that each sensitive transaction is accompanied by proper anti-CSRF tokens to verify the legitimacy of the request.

File Upload Vulnerabilities:
When users are allowed to upload files, attackers may attempt to upload malicious files to exploit the system. Input validation for file uploads must enforce strict controls on file types, sizes, and content. Files should be scanned for malware, and uploads should be stored outside of web-accessible directories to prevent unauthorized access.

XML External Entity (XXE) Attacks:
XXE attacks exploit vulnerabilities in XML parsers that process untrusted user input. By injecting malicious XML data, attackers can retrieve sensitive information or perform server-side request forgery (SSRF). Proper validation and disabling of external entity processing should be implemented for XML data to prevent XXE attacks.

Email and URL Validation:
When accepting inputs like email addresses or URLs, attackers may provide malformed or malicious entries to exploit vulnerabilities in downstream systems. Input validation must ensure that emails and URLs conform to a safe and valid format before being processed.

Input Format and Length Validation:
For all inputs, including text, numbers, dates, and more, the system must enforce strict validation on format, length, and character type. This prevents inputs like overlong data, special characters, or unsupported formats that could exploit weaknesses in the application logic.",None
3,"Authentication
Authentication is the process of verifying the identity of clients (users, processes, or systems) interacting with the application. A robust authentication system is essential for protecting sensitive data and ensuring only authorized users gain access to system resources. Key features to be considered in the authentication process include:

Secure Mechanism for Authentication:
The system must implement a reliable and secure authentication mechanism, such as multi-factor authentication (MFA), that requires users to verify their identity using multiple forms of validation (e.g., password, one-time passcode, biometric data). This reduces the risk of unauthorized access even if one authentication factor is compromised.

Protection of Sensitive Functions:
All sensitive functions and resources, including those that modify financial data, user profiles, or system configurations, must be protected by authentication mechanisms. These operations should require re-authentication or additional security measures (e.g., MFA) to ensure that only the legitimate user can perform these actions.

Storage of Credentials:
User credentials must be securely stored using strong hashing algorithms, such as bcrypt or Argon2, to prevent unauthorized access to passwords. Additionally, salted hashing should be used to add an extra layer of protection against precomputed attacks like rainbow table attacks.

Encrypted Communication:
User credentials must be transmitted over encrypted connections using secure protocols, such as TLS 1.2 or higher, to prevent interception during transmission (e.g., man-in-the-middle attacks). All authentication-related communications between the client and server must be encrypted to ensure data confidentiality and integrity.

Account Lockout Mechanism:
The system should implement an account lockout mechanism after a defined number of failed login attempts to protect against brute-force attacks. After multiple failed authentication attempts, the account should be temporarily locked or additional verification steps (such as CAPTCHA or MFA) should be required.",None
4,"Authorization
Authorization determines what actions a user is permitted to perform and which resources they can access. System resources include files, databases, registry keys, configuration settings, APIs, and other sensitive data. Proper authorization ensures that users only have access to the resources and functionality appropriate for their role and that unauthorized users are prevented from accessing sensitive information. Key considerations for authorization include:

Access Control:
Users must not be able to access resources without proper authentication. The system must enforce strict role-based access control (RBAC), ensuring that only users with appropriate roles or privileges can perform specific actions or access certain resources. Authorization checks should occur for every request, not just at login, to ensure that users do not gain unauthorized access by manipulating URLs, tokens, or session states.

Post-Logout Access Control:
Users must not be able to access resources after logging out. Once a user logs out, all session tokens or credentials should be invalidated, and any cached session data should be cleared. The system should ensure that subsequent attempts to access protected resources without re-authentication are denied.

Access Level Management:
Access to resources must be managed according to user access levels. Different roles (e.g., administrator, regular user, guest, broker) should have clearly defined and distinct permissions. These roles must be easily configurable by administrators to grant or revoke access rights without affecting other users. Access levels should be reviewed periodically to ensure proper alignment with organizational requirements.

Least Privilege Principle:
The system should adhere to the least privilege principle, meaning users should only have the minimum permissions necessary to perform their assigned tasks. No user should have access to more resources than they require to prevent abuse or accidental misuse of system functionalities.

Separation of Duties:
Sensitive actions, such as approving large financial transactions or modifying system configurations, should require the approval of more than one user with appropriate roles (e.g., an initiator and an approver). This separation of duties prevents unauthorized actions by a single user and ensures oversight in critical operations.",None
5,"Session Management
Session management involves maintaining user state after the initial connection. Key considerations for
session management include:
• Session ID Security: Session IDs must be secure and randomly generated.
• Session Expiration: Sessions must expire after a defined period.
• Session Termination: Users must be able to log out and terminate their sessions.
• Secure Transmission: Session IDs and cookies must be transmitted over encrypted connections",None
6,"Volume Management
The quality requirement for volume management aims to define the maximum amount of data that can
be stored in the database. Due to the possibility of up to 4 million users accessing the brokerage system
simultaneously within a 3-hour window (9 AM to 12 PM), with each user submitting at least one request
(usually more), a large volume of data must be processed and stored in the database. The system must
have appropriate mechanisms for managing this vast amount of data and consider the following points:
• Processing Speed: The system's processing speed should not slow down due to the large
volume of data exchanged.
• Data Integrity: In case of exchanging a large volume of data, the data should not reach its
threshold and cause database corruption. Appropriate warnings should be displayed when
nearing thresholds.
• Data Loss Prevention: Exchanging a large volume of data should not lead to data loss or failure
to store new data.
• Maximum Disk Volume: The maximum number of requests during the 3-hour window must be
considered for setting the maximum file size and buffer size in the file system.
",None
7,"Compatibility
The brokerage system must be compatible with other applications and services without causing
interference. The system should continue to operate smoothly alongside other installed applications. The
following compatibility requirements must be considered:
• No Adverse Effects: The system should not adversely affect the performance of other
applications installed in the same environment. This includes both direct effects (like stopping
other programs) and indirect effects (like consuming all resources).
• Updates and Compatibility: Updating applications should not damage the system's
compatibility.
• Shared Resources: Resources shared among programs should not cause compatibility issues in
the system.",None
8,"Performance and Availability
The system has several objectives related to performance, including speed, fault tolerance, throughput, and processing time. The performance criteria for the brokerage system are as follows:

Response Time (for online trading): The maximum response time from when a customer starts a purchase or sale until the final result is returned should be within 50 milliseconds, assuming simultaneous usage by 4 million users in a 3-hour window (9 AM to 12 PM). This time can vary depending on the stock exchange's rate changes and availability.

Minimum Response Time (for online trading): The minimum acceptable response time from a customer's perspective should be within 100 milliseconds, assuming simultaneous usage by 4 million users in a 3-hour window (9 AM to 12 PM).

Availability: The system must be available from 9 AM to 12 PM daily for trading and requests, ensuring a 99% uptime. Transactions must be processed within 500 milliseconds.

Minimum Number of Requests: The system must handle a minimum of 4 million requests during the 3-hour availability window, assuming each user makes at least one request.

Simultaneous Users: The system must support a minimum of 4 million simultaneous users during the 3-hour window.

Scalability: The system should be designed to scale beyond 4 million users, handling up to 6 million simultaneous users and 6 million requests within the 3-hour window, with no degradation in performance. The system must also handle sudden surges in traffic (up to 50% more than the expected number of users) without failure.

Graceful Degradation: In the case of system overload or partial failure, the system must maintain core functionality (e.g., basic order submission) and provide feedback to users about degraded service (e.g., longer response times), without crashing or becoming unavailable. Non-essential features should degrade first, allowing critical trading operations to continue.

Recovery Time Objective (RTO): In the event of a system failure, the system must be restored to full operational status within 15 minutes to minimize disruption during the trading window.

Recovery Point Objective (RPO): In the event of a system failure, no more than 5 minutes of data should be lost, ensuring minimal disruption to user transactions and data integrity.

Users accessing the system via the internet or through brokers can fill out forms and submit them to brokers outside of the 9 AM to 12 PM window.

It's important to define a common criterion for system performance, accepted by all related entities. For example, a test transaction with minimal data on a web page is different from a transaction on a page with many fields and images. Therefore, both systems must be comparable based on the agreed criteria.

",1-response time should be 500 milliseconds. 50 is unrealistic. 2-lack of High Availability Objective. 
9,"Security
Information security in the brokerage system refers to preventing unauthorized access, ensuring data integrity, and protecting against data breaches or destruction. The following are the security requirements for the system, which must be supported by appropriate mechanisms:

Data Validation:
All user input, including form data, transaction requests, and queries, must be properly validated to ensure no malicious data (e.g., SQL injection, cross-site scripting) can be entered into the system. Input sanitization should be applied only on the client-side to reduce processing overhead and ensure quick response times for users.

Authentication:
The system must use strong, multi-factor authentication (MFA) mechanisms to verify user identities. This includes using secure passwords, biometrics, or one-time passwords (OTPs) for users, ensuring only legitimate users can access their accounts. All authentication data must be encrypted both in transit and at rest to prevent interception or misuse.

Authorization:
The system must implement role-based access control (RBAC) to ensure that users can only access the data and system features they are permitted to use based on their role (e.g., customer, broker, admin). Any attempt to access unauthorized resources should be logged and flagged for review.

Exception Management:
All exceptions or errors must be handled securely, ensuring no sensitive system information (such as stack traces or error codes) is exposed to end users. Instead, generic error messages should be shown. Additionally, exceptions must be logged for auditing purposes, ensuring proper diagnosis and remediation of security-related issues.

Session Management:
Sessions should be managed securely with unique session tokens for each authenticated user. Sessions must time out after a period of inactivity (e.g., 15 minutes) and be automatically terminated if suspicious activity is detected. Session tokens should be stored securely and not exposed in URLs or local storage. For sensitive operations, session re-authentication should be required.

Encryption:
All sensitive data, including user credentials, personal information, transaction details, and communication between the user and the system, must be encrypted using strong encryption algorithms (e.g., AES-256 for data at rest and TLS 1.2/1.3 for data in transit). This ensures that even if data is intercepted, it cannot be read or tampered with.

Audit Logs:
The system must maintain secure audit logs of all significant actions (e.g., login attempts, transactions, data modifications). Logs should be immutable and stored in a secure location to protect against tampering. Audit logs must include user ID, action performed, timestamp, and IP address, ensuring accountability and traceability.

Intrusion Detection and Prevention:
The system must have intrusion detection and prevention systems (IDPS) in place to monitor and block potential attacks, such as distributed denial-of-service (DDoS), brute-force attacks, or other unauthorized access attempts. Alerts should be generated for any suspicious activity, and the system should respond to threats automatically where possible (e.g., locking user accounts after multiple failed login attempts).

Security Patching and Updates:
The system must have a process in place to ensure that all software components, including third-party libraries, are regularly updated and patched for known vulnerabilities. Security patches should be applied promptly to prevent exploitation of any vulnerabilities.
","1-The original NFR stated that input sanitization should be applied on both the client-side and server-side, which is a best practice. input sanitization is only applied on the client-side to ""reduce processing overhead."" This creates a violation of ISO/IEC 27001 (Clause A.9.4), which requires the secure handling of input data. Server-side validation is critical to prevent malicious data from reaching the backend, and this change leaves the system vulnerable to attacks like SQL injection and cross-site scripting (XSS) if the client-side validation is bypassed. 2-ISO/IEC 27001 requires an incident management process, which includes reporting, response procedures, and logging of security incidents (Clause A.16). However, this NFR lacks any mention of incident management procedures for handling security breaches or responding to detected threats. For compliance, the NFR should include a requirement for defining and implementing a formal incident response plan, which ensures quick and effective handling of security incidents. This would cover steps for incident detection, escalation, investigation, resolution, and post-incident analysis."
10,"Data Validation
Data validation involves reviewing, filtering, and removing malicious input to ensure data security and maintain system integrity. Proper input validation protects the system from a wide range of common attacks and vulnerabilities by ensuring that user input is properly sanitized and conforms to expected formats. The following are common attacks mitigated by input validation:

SQL Injection:
This attack exploits vulnerabilities in the application's data validation process, allowing attackers to execute unauthorized SQL commands. It occurs when user input is embedded in SQL queries without proper validation or sanitization, enabling attackers to impersonate users, alter or delete data, or perform denial-of-service attacks. Input validation should ensure that all SQL queries are parameterized, but user inputs only need to be sanitized on trusted fields to prevent SQL injection attacks.

Buffer Overflow:
A buffer overflow occurs when input data exceeds the allocated buffer size in memory, leading to unpredictable behavior such as denial of service, crashes, or code execution. Proper input validation must include size checks for user inputs, ensuring that all inputs are within expected bounds to prevent buffer overflows and other memory-based attacks.

Code Injection:
Code injection attacks involve injecting malicious code into an application to exploit vulnerabilities in its input validation process. These attacks can lead to data theft, unauthorized access, or system compromise. To mitigate code injection, input should be strictly validated against predefined patterns (e.g., escaping special characters) and ensure only allowed data types are processed.

Cross-Site Scripting (XSS):
Cross-site scripting allows attackers to inject malicious scripts into web pages viewed by other users. This can lead to session hijacking, defacement, or theft of sensitive information. Input validation must ensure that any user-supplied data that is rendered on a webpage is properly sanitized and encoded to prevent XSS attacks.

Cross-Site Request Forgery (CSRF):
In CSRF attacks, an attacker tricks a user into executing unwanted actions on a web application in which they are authenticated. Input validation must ensure that each sensitive transaction is accompanied by proper anti-CSRF tokens to verify the legitimacy of the request.

File Upload Vulnerabilities:
When users are allowed to upload files, attackers may attempt to upload malicious files to exploit the system. Input validation for file uploads must enforce strict controls on file types, sizes, and content. Files should be scanned for malware, and uploads should be stored outside of web-accessible directories to prevent unauthorized access.

XML External Entity (XXE) Attacks:
XXE attacks exploit vulnerabilities in XML parsers that process untrusted user input. By injecting malicious XML data, attackers can retrieve sensitive information or perform server-side request forgery (SSRF). Proper validation and disabling of external entity processing should be implemented for XML data to prevent XXE attacks.

Email and URL Validation:
When accepting inputs like email addresses or URLs, attackers may provide malformed or malicious entries to exploit vulnerabilities in downstream systems. Input validation must ensure that emails and URLs conform to a safe and valid format before being processed.

Input Format and Length Validation:
For all inputs, including text, numbers, dates, and more, the system must enforce strict validation on format, length, and character type. This prevents inputs like overlong data, special characters, or unsupported formats that could exploit weaknesses in the application logic.
","1-user inputs only need to be sanitized on trusted fields."" This is incorrect because all user input, regardless of the source or trust level, should be sanitized and validated. Relying only on trusted fields for sanitization opens up security risks, as attackers may still find ways to inject malicious input into less-protected fields. This incorrect information goes against best practices in SQL Injection prevention, where every piece of user input must be treated as potentially malicious. 2- An important aspect that is missing from this NFR is the need for logging and alerting failed validation attempts. This is a critical security measure that allows administrators to detect and respond to potential attacks. For example, frequent failed attempts at SQL injection or buffer overflow attacks should trigger alerts for security teams to investigate and respond accordingly. This is a common best practice in security monitoring, helping organizations identify threats in real time.
Missing Information Example:""All failed input validation attempts must be logged for auditing purposes, and excessive failed attempts (e.g., more than 10 from the same IP) should trigger alerts to the security team for further investigation."
11,"Authentication
Authentication is the process of verifying the identity of clients (users, processes, or systems) interacting with the application. A robust authentication system is essential for protecting sensitive data and ensuring only authorized users gain access to system resources. Key features to be considered in the authentication process include:

Secure Mechanism for Authentication:
The system must implement a reliable and secure authentication mechanism, such as multi-factor authentication (MFA), that requires users to verify their identity using multiple forms of validation (e.g., password, one-time passcode, biometric data). However, for low-risk transactions, single-factor authentication (SFA) can be used to reduce operational complexity.

Protection of Sensitive Functions:
All sensitive functions and resources, including those that modify financial data, user profiles, or system configurations, must be protected by authentication mechanisms. These operations should require re-authentication or additional security measures (e.g., MFA) to ensure that only the legitimate user can perform these actions.

Storage of Credentials:
User credentials must be securely stored using strong hashing algorithms, such as bcrypt or Argon2, to prevent unauthorized access to passwords. Additionally, salted hashing should be used to add an extra layer of protection against precomputed attacks like rainbow table attacks.

Encrypted Communication:
User credentials must be transmitted over encrypted connections using secure protocols, such as TLS 1.2 or higher, to prevent interception during transmission (e.g., man-in-the-middle attacks). All authentication-related communications between the client and server must be encrypted to ensure data confidentiality and integrity.

Account Lockout Mechanism:
The system should implement an account lockout mechanism after a defined number of failed login attempts to protect against brute-force attacks. After multiple failed authentication attempts, the account should be temporarily locked or additional verification steps (such as CAPTCHA or MFA) should be required.

","1- Secure Mechanism for Authentication (SFA for Low-Risk Transactions):
Regulatory standards, require the use of secure multi-factor authentication (MFA) across all levels of authentication, especially in financial systems, to protect against fraud and unauthorized access?(articles). By allowing single-factor authentication even for low-risk transactions, the system would be vulnerable to a variety of attacks, such as phishing or brute-force attacks, which are more easily thwarted by MFA. 2- Logging and Auditing of Authentication Events:
The NFR does not mention logging or auditing of authentication events. This is crucial, particularly in financial systems, for monitoring and responding to suspicious activities. As stated in the regulatory articles?(articles), systems should have audit logging for all authentication attempts (both successful and failed) to detect and respond to potential threats. This would ensure compliance with regulatory requirements and offer enhanced security monitoring. Missing Information Example:
""The system must log all authentication attempts, including successful logins, failed attempts, and suspicious activity, and store these logs securely for auditing and compliance purposes."""
